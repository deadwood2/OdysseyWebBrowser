include(GNUInstallDirs)

# FIXME: We want to expose fewer options to downstream, but for now everything is public.

WEBKIT_OPTION_BEGIN()

#Enabled
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_VIDEO PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(USE_SYSTEM_MALLOC PUBLIC ON)
if (WTF_CPU_X86_64)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_JIT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTL_JIT PUBLIC ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_C_LOOP PUBLIC OFF)
else ()
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_JIT PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTL_JIT PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_C_LOOP PUBLIC ON)
endif ()
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_SOURCE PUBLIC ON)

WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_BOX_DECORATION_BREAK PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_CONIC_GRADIENTS PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_PAINTING_API PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_CSS_TYPED_OM PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LEGACY_CSS_VENDOR_PREFIXES PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DRAG_SUPPORT PRIVATE ON)

WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_COLOR PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATE PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATETIMELOCAL PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_MONTH PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_TIME PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_WEEK PRIVATE ON)

WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MHTML PRIVATE ON)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_STATISTICS PRIVATE ON)

#Disabled

# WebAssembly not compiling
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBASSEMBLY PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_AUDIO PUBLIC OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_CRYPTO PUBLIC OFF)

WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GEOLOCATION PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SAMPLING_PROFILER PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_3D_TRANSFORMS PRIVATE OFF)
# Doesn't work with curl backend
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_FTPDIR PRIVATE OFF)
# Missing dependencies
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_REMOTE_INSPECTOR PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SMOOTH_SCROLLING PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SERVICE_WORKER PRIVATE OFF)
WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCESSIBILITY PRIVATE OFF)

#Candidates
#ENABLE_CONTENT_EXTENSIONS
#ENABLE_CURSOR_VISIBILITY
#ENABLE_DOWNLOAD_ATTRIBUTE

# FIXME: Perhaps we need a more generic way of defining dependencies between features.
# VIDEO_TRACK depends on VIDEO.
if (NOT ENABLE_VIDEO AND ENABLE_VIDEO_TRACK)
    message(STATUS "Disabling VIDEO_TRACK since VIDEO support is disabled.")
    set(ENABLE_VIDEO_TRACK OFF)
endif ()
WEBKIT_OPTION_END()

set(PROJECT_VERSION_MAJOR 2)
set(PROJECT_VERSION_MINOR 9)
set(PROJECT_VERSION_PATCH 0)
set(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})

set(WEBKIT_MICRO_VERSION ${PROJECT_VERSION_PATCH})
set(WEBKIT_MINOR_VERSION ${PROJECT_VERSION_MINOR})
set(WEBKIT_MAJOR_VERSION ${PROJECT_VERSION_MAJOR})

set(ENABLE_WEBCORE ON)
set(ENABLE_INSPECTOR ON)
set(ENABLE_PLUGIN_PROCESS ON)
set(ENABLE_WEBKIT OFF)
set(ENABLE_WEBKIT_LEGACY ON)

set(WTF_USE_ICU_UNICODE 1)
set(WTF_USE_CURL 1)

set(WTF_OUTPUT_NAME WTFMUI)
set(JavaScriptCore_OUTPUT_NAME javascriptcoremui)
set(WebCore_OUTPUT_NAME WebCoreMUI)
set(WebKit_OUTPUT_NAME webkitmui)
set(WebKit2_OUTPUT_NAME webkit2mui)
set(WebKit2_WebProcess_OUTPUT_NAME WebKitWebProcess)

add_definitions(-DUSER_AGENT_GTK_MAJOR_VERSION=601)
add_definitions(-DUSER_AGENT_GTK_MINOR_VERSION=1)

# FIXME: These need to be configurable.

set(ICU_INCLUDE_DIRS ${AROS_SDK_DIR}/include/)
set(ICU_DATA_LIBRARY ${AROS_SDK_DIR}/lib/libicudata.a)
add_library(ICU::data UNKNOWN IMPORTED)
set_target_properties(ICU::data PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${ICU_INCLUDE_DIRS}"
    IMPORTED_LOCATION "${ICU_DATA_LIBRARY}"
)
set(ICU_I18N_LIBRARY ${AROS_SDK_DIR}/lib/libicui18n.a)
add_library(ICU::i18n UNKNOWN IMPORTED)
set_target_properties(ICU::i18n PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${ICU_INCLUDE_DIRS}"
    IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
    IMPORTED_LOCATION "${ICU_I18N_LIBRARY}"
)
set(ICU_UC_LIBRARY ${AROS_SDK_DIR}/lib/libicuuc.a)
add_library(ICU::uc UNKNOWN IMPORTED)
set_target_properties(ICU::uc PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${ICU_INCLUDE_DIRS}"
    IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
    IMPORTED_LOCATION "${ICU_UC_LIBRARY}"
)

set(SQLite3_LIBRARY ${AROS_SDK_DIR}/lib/libsqlite3.a)
add_library(SQLite::SQLite3 UNKNOWN IMPORTED GLOBAL)
set_target_properties(SQLite::SQLite3 PROPERTIES
    IMPORTED_LOCATION "${SQLite3_LIBRARY}"
)
set(LibPSL_LIBRARY ${AROS_SDK_DIR}/lib/libpsl.a)
add_library(LibPSL::LibPSL UNKNOWN IMPORTED GLOBAL)
set_target_properties(LibPSL::LibPSL PROPERTIES
    IMPORTED_LOCATION "${LibPSL_LIBRARY}"
)
set(HarfBuzz_LIBRARY ${AROS_SDK_DIR}/lib/libamiga.a)
add_library(HarfBuzz::HarfBuzz UNKNOWN IMPORTED GLOBAL)
set_target_properties(HarfBuzz::HarfBuzz PROPERTIES
    IMPORTED_LOCATION "${HarfBuzz_LIBRARY}"
)
set(HarfBuzz_ICU_LIBRARY ${AROS_SDK_DIR}/lib/libamiga.a)
add_library(HarfBuzz::ICU UNKNOWN IMPORTED GLOBAL)
set_target_properties(HarfBuzz::ICU PROPERTIES
    IMPORTED_LOCATION "${HarfBuzz_ICU_LIBRARY}"
)
set(LibXml2_LIBRARY ${AROS_SDK_DIR}/lib/libxml2.a)
add_library(LibXml2::LibXml2 UNKNOWN IMPORTED GLOBAL)
set_target_properties(LibXml2::LibXml2 PROPERTIES
    IMPORTED_LOCATION "${LibXml2_LIBRARY}"
)
set(LibXslt_LIBRARY ${AROS_SDK_DIR}/lib/libxslt.a)
add_library(LibXslt::LibXslt UNKNOWN IMPORTED GLOBAL)
set_target_properties(LibXslt::LibXslt PROPERTIES
    IMPORTED_LOCATION "${LibXslt_LIBRARY}"
)
set(ZLIB_LIBRARY ${AROS_SDK_DIR}/lib/libz.a)
add_library(ZLIB::ZLIB UNKNOWN IMPORTED GLOBAL)
set_target_properties(ZLIB::ZLIB PROPERTIES
    IMPORTED_LOCATION "${ZLIB_LIBRARY}"
)
set(Cairo_LIBRARY ${AROS_SDK_DIR}/lib/libcairo.a)
add_library(Cairo::Cairo UNKNOWN IMPORTED GLOBAL)
set_target_properties(Cairo::Cairo PROPERTIES
    IMPORTED_LOCATION "${Cairo_LIBRARY}"
)
set(libcurl_LIBRARY ${AROS_SDK_DIR}/lib/libcurl.a)
add_library(CURL::libcurl UNKNOWN IMPORTED GLOBAL)
set_target_properties(CURL::libcurl PROPERTIES
    IMPORTED_LOCATION "${libcurl_LIBRARY}"
)
set(SSL_LIBRARY ${AROS_SDK_DIR}/lib/libssl.a)
add_library(OpenSSL::SSL UNKNOWN IMPORTED GLOBAL)
set_target_properties(OpenSSL::SSL PROPERTIES
    IMPORTED_LOCATION "${SSL_LIBRARY}"
)
set(JPEG_LIBRARY ${AROS_SDK_DIR}/lib/libjpeg.a)
add_library(JPEG::JPEG UNKNOWN IMPORTED GLOBAL)
set_target_properties(JPEG::JPEG PROPERTIES
    IMPORTED_LOCATION "${JPEG_LIBRARY}"
)
set(PNG_LIBRARY ${AROS_SDK_DIR}/lib/libpng.a)
add_library(PNG::PNG UNKNOWN IMPORTED GLOBAL)
set_target_properties(PNG::PNG PROPERTIES
    IMPORTED_LOCATION "${PNG_LIBRARY}"
)
set(Fontconfig_LIBRARY ${AROS_SDK_DIR}/lib/libfontconfig.a)
add_library(Fontconfig::Fontconfig UNKNOWN IMPORTED GLOBAL)
set_target_properties(Fontconfig::Fontconfig PROPERTIES
    IMPORTED_LOCATION "${Fontconfig_LIBRARY}"
)
set(Freetype_LIBRARY ${AROS_SDK_DIR}/lib/libfreetype2.a)
add_library(Freetype::Freetype UNKNOWN IMPORTED GLOBAL)
set_target_properties(Freetype::Freetype PROPERTIES
    IMPORTED_LOCATION "${Freetype_LIBRARY}"
)

if (EGL_FOUND)
    set(WTF_USE_EGL 1)
endif ()

if (ENABLE_SPELLCHECK)
    find_package(Enchant REQUIRED)
endif ()

if (ENABLE_INDEXED_DATABASE)
    set(WTF_USE_LEVELDB 1)
    add_definitions(-DWTF_USE_LEVELDB=1)
endif ()

set(CPACK_SOURCE_GENERATOR TBZ2)
