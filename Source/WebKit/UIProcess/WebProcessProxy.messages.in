# Copyright (C) 2010, 2011 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

messages -> WebProcessProxy LegacyReceiver {
    UpdateBackForwardItem(struct WebKit::BackForwardListItemState backForwardListItemState)
    DidDestroyFrame(WebCore::FrameIdentifier frameID) 

    DidDestroyUserGestureToken(uint64_t userGestureTokenID) 

    ShouldTerminate() -> (bool shouldTerminate) Synchronous

    EnableSuddenTermination()
    DisableSuddenTermination()

    # Plugin messages.
#if ENABLE(NETSCAPE_PLUGIN_API)
    GetPlugins(bool refresh) -> (Vector<WebCore::PluginInfo> plugins, Vector<WebCore::PluginInfo> applicationPlugins, struct Optional<Vector<WebCore::SupportedPluginIdentifier>> supportedPluginIdentifiers) Synchronous
    GetPluginProcessConnection(uint64_t pluginProcessToken) -> (IPC::Attachment connectionHandle, bool supportsAsynchronousInitialization) Synchronous
#endif
    GetNetworkProcessConnection() -> (IPC::Attachment connectionHandle) Synchronous
    ProcessReadyToSuspend()
    DidCancelProcessSuspension()

    SetIsHoldingLockedFiles(bool isHoldingLockedFiles)

    DidExceedActiveMemoryLimit()
    DidExceedInactiveMemoryLimit()
    DidExceedCPULimit()

    StopResponsivenessTimer()

    DidReceiveMainThreadPing()
    DidReceiveBackgroundResponsivenessPing()

    MemoryPressureStatusChanged(bool isUnderMemoryPressure)
    DidExceedInactiveMemoryLimitWhileActive()

    CreateNewMessagePortChannel(struct WebCore::MessagePortIdentifier port1, struct WebCore::MessagePortIdentifier port2)
    EntangleLocalPortInThisProcessToRemote(struct WebCore::MessagePortIdentifier local, struct WebCore::MessagePortIdentifier remote)
    MessagePortDisentangled(struct WebCore::MessagePortIdentifier local)
    MessagePortClosed(struct WebCore::MessagePortIdentifier local)
    TakeAllMessagesForPort(struct WebCore::MessagePortIdentifier port, uint64_t messagesCallbackIdentifier)
    PostMessageToRemote(struct WebCore::MessageWithMessagePorts message, struct WebCore::MessagePortIdentifier remote)
    CheckRemotePortForActivity(struct WebCore::MessagePortIdentifier port, uint64_t callbackIdentifier)
    DidDeliverMessagePortMessages(uint64_t messageBatchIdentifier)
    DidCheckProcessLocalPortForActivity(uint64_t callbackIdentifier, bool isLocallyReachable)

    DidCollectPrewarmInformation(WebCore::RegistrableDomain domain, struct WebCore::PrewarmInformation prewarmInformation)

#if PLATFORM(COCOA)
    CacheMediaMIMETypes(Vector<String> types)
#endif

#if PLATFORM(MAC)
    RequestHighPerformanceGPU()
    ReleaseHighPerformanceGPU()
#endif

#if PLATFORM(MAC) && ENABLE(WEBPROCESS_WINDOWSERVER_BLOCKING)
    StartDisplayLink(unsigned observerID, uint32_t displayID)
    StopDisplayLink(unsigned observerID, uint32_t displayID)
#endif

#if PLATFORM(IOS_FAMILY)
    ProcessWasUnexpectedlyUnsuspended() -> () Async
#endif
}
