/*
 * Copyright (C) 2006, 2007 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    CustomToJSObject,
    Exposed=(Window,Worker),
    IsImmutablePrototypeExoticObjectOnPrototype,
    JSCustomHeader,
    JSCustomToNativeObject,
] interface EventTarget {
#if !(defined(LANGUAGE_GOBJECT) && LANGUAGE_GOBJECT)
    // FIXME: Should be:
    // void addEventListener(DOMString type, EventListener? callback, optional (AddEventListenerOptions or boolean) options);
    // void removeEventListener(DOMString type, EventListener? callback, optional (EventListenerOptions or boolean) options);
    [ImplementedAs=addEventListenerForBindings] void addEventListener([AtomicString] DOMString type, EventListener? listener);
    [ImplementedAs=addEventListenerForBindings] void addEventListener([AtomicString] DOMString type, EventListener? listener, AddEventListenerOptions options);
    [ImplementedAs=removeEventListenerForBindings] void removeEventListener([AtomicString] DOMString type, EventListener? listener);
    [ImplementedAs=removeEventListenerForBindings] void removeEventListener([AtomicString] DOMString type, EventListener? listener, EventListenerOptions options);
#endif

    [ImplementedAs=addEventListenerForBindings] void addEventListener([AtomicString] DOMString type, EventListener? listener, boolean useCapture);
    [ImplementedAs=removeEventListenerForBindings] void removeEventListener([AtomicString] DOMString type, EventListener? listener, boolean useCapture);

    [ImplementedAs=dispatchEventForBindings, RaisesException] boolean dispatchEvent(Event event);
};

dictionary EventListenerOptions {
    boolean capture = false;
};

dictionary AddEventListenerOptions {
    boolean capture = false;
    boolean passive = false;
    boolean once = false;
};
