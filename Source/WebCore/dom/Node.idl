/*
 * Copyright (C) 2006-2016 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    CustomIsReachable,
    CustomToJSObject,
    ExportMacro=WEBCORE_EXPORT,
    JSCustomHeader,
    JSCustomMarkFunction,
    JSCustomPushEventHandlerScope,
] interface Node : EventTarget {
    // NodeType
    const unsigned short ELEMENT_NODE = 1;
    const unsigned short ATTRIBUTE_NODE = 2;
    const unsigned short TEXT_NODE = 3;
    const unsigned short CDATA_SECTION_NODE = 4;
    const unsigned short ENTITY_REFERENCE_NODE = 5;
    const unsigned short ENTITY_NODE = 6;
    const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
    const unsigned short COMMENT_NODE = 8;
    const unsigned short DOCUMENT_NODE = 9;
    const unsigned short DOCUMENT_TYPE_NODE = 10;
    const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
    const unsigned short NOTATION_NODE = 12;

    readonly attribute DOMString nodeName;

    [CEReactions, SetterMayThrowException] attribute DOMString? nodeValue;

    [DOMJIT=Getter, CustomGetter] readonly attribute unsigned short nodeType;
    [DOMJIT=Getter] readonly attribute Node? parentNode;
    readonly attribute NodeList childNodes;
    [DOMJIT=Getter] readonly attribute Node? firstChild;
    [DOMJIT=Getter] readonly attribute Node? lastChild;
    [DOMJIT=Getter] readonly attribute Node? previousSibling;
    [DOMJIT=Getter] readonly attribute Node? nextSibling;
    [DOMJIT=Getter] readonly attribute Document? ownerDocument;

    [CEReactions, Custom, MayThrowException] Node insertBefore(Node newChild, Node? refChild);
    [CEReactions, Custom, MayThrowException] Node replaceChild(Node newChild, Node oldChild);
    [CEReactions, Custom, MayThrowException] Node removeChild(Node oldChild);
    [CEReactions, Custom, MayThrowException] Node appendChild(Node newChild);

    boolean hasChildNodes();

    [CEReactions, ImplementedAs=cloneNodeForBindings, MayThrowException, NewObject] Node cloneNode(optional boolean deep = false);

    void normalize();

    readonly attribute USVString baseURI;

    [CEReactions, SetterMayThrowException] attribute DOMString? textContent;

    boolean isSameNode(Node? other);
    boolean isEqualNode(Node? other);

    DOMString? lookupPrefix(DOMString? namespaceURI);
    DOMString? lookupNamespaceURI(DOMString? prefix);
    boolean isDefaultNamespace(DOMString? namespaceURI);

    // DocumentPosition
    const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;
    const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;
    const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;
    const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;
    const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;
    const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

    unsigned short compareDocumentPosition(Node other);

    boolean contains(Node? other);

    [EnabledAtRuntime=ShadowDOM] Node getRootNode(optional GetRootNodeOptions options);
    [EnabledAtRuntime=ShadowDOM] readonly attribute boolean isConnected;

    readonly attribute Element parentElement;
};

dictionary GetRootNodeOptions {
    boolean composed = false;
};
