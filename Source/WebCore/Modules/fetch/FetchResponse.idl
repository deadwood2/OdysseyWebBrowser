/*
 * Copyright (C) 2016 Canon Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted, provided that the following conditions
 * are required to be met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * 3.  Neither the name of Canon Inc. nor the names of
 *     its contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY CANON INC. AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL CANON INC. AND ITS CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
enum ResponseType { "basic", "cors", "default", "error", "opaque", "opaqueredirect" };

[
    ActiveDOMObject,
    Conditional=FETCH_API,
    EnabledAtRuntime=FetchAPI,
    ConstructorCallWith=ScriptExecutionContext,
    Exposed=(Window,Worker),
    InterfaceName=Response,
    JSBuiltinConstructor,
    PrivateIdentifier,
    PublicIdentifier
]
interface FetchResponse {
    [NewObject, CallWith=ScriptExecutionContext] static FetchResponse error();
    [NewObject, CallWith=ScriptExecutionContext, RaisesException] static FetchResponse redirect(DOMString url, optional unsigned short status = 302);

    readonly attribute ResponseType type;

    readonly attribute DOMString url;
    readonly attribute boolean redirected;
    readonly attribute unsigned short status;
    readonly attribute boolean ok;
    readonly attribute DOMString statusText;
    // FIXME: Add support for SameObject keyword for headers
    readonly attribute FetchHeaders headers;
    [JSBuiltin] readonly attribute ReadableStream? body;

    // Copy of FetchBody IDL as we want to implement some of these as built-ins.
    [ImplementedAs=isDisturbed] readonly attribute boolean bodyUsed;
    [JSBuiltin] Promise arrayBuffer();
    [JSBuiltin] Promise blob();
    [JSBuiltin] Promise formData();
    [JSBuiltin] Promise json();
    [JSBuiltin] Promise text();

    [JSBuiltin] FetchResponse clone();

    [PrivateIdentifier, NewObject] FetchResponse cloneForJS();

    [Conditional=STREAMS_API, PrivateIdentifier] void startConsumingStream(unsigned short type);
    [Conditional=STREAMS_API, PrivateIdentifier] void consumeChunk(Uint8Array chunk);
    [Conditional=STREAMS_API, PrivateIdentifier] Promise finishConsumingStream();

    [PrivateIdentifier] Promise consume(unsigned short type);
    [PrivateIdentifier] boolean isLoading();
    [PrivateIdentifier, RaisesException] void setStatus(unsigned short status, DOMString statusText);
    [CallWith=ScriptState, PrivateIdentifier] void initializeWith(any body);
    [PrivateIdentifier, NewObject] ReadableStreamSource createReadableStreamSource();
    [PrivateIdentifier] boolean isDisturbed();
};
