/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

enum UnionType { "node", "sequence", "dictionary" };

[
    NoInterfaceObject,
    ImplementationLacksVTable,
    ExportMacro=WEBCORE_TESTSUPPORT_EXPORT,
] interface TypeConversions {
    attribute long testLong;
    [EnforceRange] attribute long testEnforceRangeLong;
    attribute unsigned long testUnsignedLong;
    [EnforceRange] attribute unsigned long testEnforceRangeUnsignedLong;

    attribute long long testLongLong;
    [EnforceRange] attribute long long testEnforceRangeLongLong;
    attribute unsigned long long testUnsignedLongLong;
    [EnforceRange] attribute unsigned long long testEnforceRangeUnsignedLongLong;

    attribute byte testByte;
    [EnforceRange] attribute byte testEnforceRangeByte;
    attribute octet testOctet;
    [EnforceRange] attribute octet testEnforceRangeOctet;

    attribute short testShort;
    [EnforceRange] attribute short testEnforceRangeShort;
    attribute unsigned short testUnsignedShort;
    [EnforceRange] attribute unsigned short testEnforceRangeUnsignedShort;

    attribute DOMString testString;
    attribute ByteString testByteString;
    attribute USVString testUSVString;

    void setTestLongRecord(record<DOMString, long> record);
    record<DOMString, long> testLongRecord();

    void setTestNodeRecord(record<USVString, Node> record);
    record<USVString, Node> testNodeRecord();

    void setTestSequenceRecord(record<ByteString, sequence<DOMString>> record);
    record<ByteString, sequence<DOMString>> testSequenceRecord();

    attribute (DOMString or long or boolean or Node or sequence<long>) testUnion;
    
    void setTypeConversionsDictionary(TypeConversionsDictionary d);
    readonly attribute long typeConversionsDictionaryLongValue;
    readonly attribute DOMString typeConversionsDictionaryStringValue;
    readonly attribute sequence<DOMString> typeConversionsDictionarySequenceValue;
    readonly attribute UnionType typeConversionsDictionaryUnionType;
};

dictionary TypeConversionsOtherDictionary {
    long longValue = 0;
    DOMString stringValue = "";
};

dictionary TypeConversionsDictionary {
    long longValue = 0;
    DOMString stringValue = "";
    sequence<DOMString> sequenceValue = [];
    (Node or sequence<DOMString> or TypeConversionsOtherDictionary) unionValue = null;
};
