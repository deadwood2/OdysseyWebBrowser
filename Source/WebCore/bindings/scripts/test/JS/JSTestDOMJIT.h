/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#pragma once

#include "JSNode.h"
#include "TestDOMJIT.h"
#include <domjit/DOMJITGetterSetter.h>

namespace WebCore {

class JSTestDOMJIT : public JSNode {
public:
    using Base = JSNode;
    using DOMWrapped = TestDOMJIT;
    static JSTestDOMJIT* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject, Ref<TestDOMJIT>&& impl)
    {
        JSTestDOMJIT* ptr = new (NotNull, JSC::allocateCell<JSTestDOMJIT>(globalObject->vm().heap)) JSTestDOMJIT(structure, *globalObject, WTFMove(impl));
        ptr->finishCreation(globalObject->vm());
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::VM&, JSC::JSGlobalObject*);
    static JSC::JSObject* prototype(JSC::VM&, JSC::JSGlobalObject*);

    DECLARE_INFO;

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::JSType(JSNodeType), StructureFlags), info());
    }

    static JSC::JSValue getConstructor(JSC::VM&, const JSC::JSGlobalObject*);
    static void visitChildren(JSCell*, JSC::SlotVisitor&);

    TestDOMJIT& wrapped() const
    {
        return static_cast<TestDOMJIT&>(Base::wrapped());
    }
protected:
    JSTestDOMJIT(JSC::Structure*, JSDOMGlobalObject&, Ref<TestDOMJIT>&&);

    void finishCreation(JSC::VM&);
};


// DOMJIT emitters for attributes

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITAnyAttr(void);
class TestDOMJITAnyAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITAnyAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITBooleanAttr(void);
class TestDOMJITBooleanAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITBooleanAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITByteAttr(void);
class TestDOMJITByteAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITByteAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITOctetAttr(void);
class TestDOMJITOctetAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITOctetAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITShortAttr(void);
class TestDOMJITShortAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITShortAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedShortAttr(void);
class TestDOMJITUnsignedShortAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedShortAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITLongAttr(void);
class TestDOMJITLongAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITLongAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedLongAttr(void);
class TestDOMJITUnsignedLongAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedLongAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITLongLongAttr(void);
class TestDOMJITLongLongAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITLongLongAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedLongLongAttr(void);
class TestDOMJITUnsignedLongLongAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedLongLongAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITFloatAttr(void);
class TestDOMJITFloatAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITFloatAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnrestrictedFloatAttr(void);
class TestDOMJITUnrestrictedFloatAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnrestrictedFloatAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITDoubleAttr(void);
class TestDOMJITDoubleAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITDoubleAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnrestrictedDoubleAttr(void);
class TestDOMJITUnrestrictedDoubleAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnrestrictedDoubleAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITDomStringAttr(void);
class TestDOMJITDomStringAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITDomStringAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITByteStringAttr(void);
class TestDOMJITByteStringAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITByteStringAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUsvStringAttr(void);
class TestDOMJITUsvStringAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUsvStringAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITNodeAttr(void);
class TestDOMJITNodeAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITNodeAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITBooleanNullableAttr(void);
class TestDOMJITBooleanNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITBooleanNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITByteNullableAttr(void);
class TestDOMJITByteNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITByteNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITOctetNullableAttr(void);
class TestDOMJITOctetNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITOctetNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITShortNullableAttr(void);
class TestDOMJITShortNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITShortNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedShortNullableAttr(void);
class TestDOMJITUnsignedShortNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedShortNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITLongNullableAttr(void);
class TestDOMJITLongNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITLongNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedLongNullableAttr(void);
class TestDOMJITUnsignedLongNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedLongNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITLongLongNullableAttr(void);
class TestDOMJITLongLongNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITLongLongNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnsignedLongLongNullableAttr(void);
class TestDOMJITUnsignedLongLongNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnsignedLongLongNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITFloatNullableAttr(void);
class TestDOMJITFloatNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITFloatNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnrestrictedFloatNullableAttr(void);
class TestDOMJITUnrestrictedFloatNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnrestrictedFloatNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITDoubleNullableAttr(void);
class TestDOMJITDoubleNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITDoubleNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUnrestrictedDoubleNullableAttr(void);
class TestDOMJITUnrestrictedDoubleNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUnrestrictedDoubleNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITDomStringNullableAttr(void);
class TestDOMJITDomStringNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITDomStringNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITByteStringNullableAttr(void);
class TestDOMJITByteStringNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITByteStringNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITUsvStringNullableAttr(void);
class TestDOMJITUsvStringNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITUsvStringNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForTestDOMJITNodeNullableAttr(void);
class TestDOMJITNodeNullableAttrDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    TestDOMJITNodeNullableAttrDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

template<> struct JSDOMWrapperConverterTraits<TestDOMJIT> {
    using WrapperClass = JSTestDOMJIT;
    using ToWrappedReturnType = TestDOMJIT*;
};

} // namespace WebCore
