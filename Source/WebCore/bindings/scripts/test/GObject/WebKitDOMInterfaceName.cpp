/*
 *  This file is part of the WebKit open source project.
 *  This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Library General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Library General Public License for more details.
 *
 *  You should have received a copy of the GNU Library General Public License
 *  along with this library; see the file COPYING.LIB.  If not, write to
 *  the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301, USA.
 */

#include "config.h"
#include "WebKitDOMInterfaceName.h"

#include "CSSImportRule.h"
#include "DOMObjectCache.h"
#include "Document.h"
#include "ExceptionCode.h"
#include "ExceptionCodeDescription.h"
#include "JSMainThreadExecState.h"
#include "WebKitDOMInterfaceNamePrivate.h"
#include "WebKitDOMPrivate.h"
#include "gobject/ConvertToUTF8String.h"
#include <wtf/GetPtr.h>
#include <wtf/RefPtr.h>

#define WEBKIT_DOM_INTERFACE_NAME_GET_PRIVATE(obj) G_TYPE_INSTANCE_GET_PRIVATE(obj, WEBKIT_DOM_TYPE_INTERFACE_NAME, WebKitDOMInterfaceNamePrivate)

typedef struct _WebKitDOMInterfaceNamePrivate {
    RefPtr<WebCore::InterfaceName> coreObject;
} WebKitDOMInterfaceNamePrivate;

namespace WebKit {

WebKitDOMInterfaceName* kit(WebCore::InterfaceName* obj)
{
    if (!obj)
        return 0;

    if (gpointer ret = DOMObjectCache::get(obj))
        return WEBKIT_DOM_INTERFACE_NAME(ret);

    return wrapInterfaceName(obj);
}

WebCore::InterfaceName* core(WebKitDOMInterfaceName* request)
{
    return request ? static_cast<WebCore::InterfaceName*>(WEBKIT_DOM_OBJECT(request)->coreObject) : 0;
}

WebKitDOMInterfaceName* wrapInterfaceName(WebCore::InterfaceName* coreObject)
{
    ASSERT(coreObject);
    return WEBKIT_DOM_INTERFACE_NAME(g_object_new(WEBKIT_DOM_TYPE_INTERFACE_NAME, "core-object", coreObject, nullptr));
}

} // namespace WebKit

G_DEFINE_TYPE(WebKitDOMInterfaceName, webkit_dom_interface_name, WEBKIT_DOM_TYPE_OBJECT)

static void webkit_dom_interface_name_finalize(GObject* object)
{
    WebKitDOMInterfaceNamePrivate* priv = WEBKIT_DOM_INTERFACE_NAME_GET_PRIVATE(object);

    WebKit::DOMObjectCache::forget(priv->coreObject.get());

    priv->~WebKitDOMInterfaceNamePrivate();
    G_OBJECT_CLASS(webkit_dom_interface_name_parent_class)->finalize(object);
}

static GObject* webkit_dom_interface_name_constructor(GType type, guint constructPropertiesCount, GObjectConstructParam* constructProperties)
{
    GObject* object = G_OBJECT_CLASS(webkit_dom_interface_name_parent_class)->constructor(type, constructPropertiesCount, constructProperties);

    WebKitDOMInterfaceNamePrivate* priv = WEBKIT_DOM_INTERFACE_NAME_GET_PRIVATE(object);
    priv->coreObject = static_cast<WebCore::InterfaceName*>(WEBKIT_DOM_OBJECT(object)->coreObject);
    WebKit::DOMObjectCache::put(priv->coreObject.get(), object);

    return object;
}

static void webkit_dom_interface_name_class_init(WebKitDOMInterfaceNameClass* requestClass)
{
    GObjectClass* gobjectClass = G_OBJECT_CLASS(requestClass);
    g_type_class_add_private(gobjectClass, sizeof(WebKitDOMInterfaceNamePrivate));
    gobjectClass->constructor = webkit_dom_interface_name_constructor;
    gobjectClass->finalize = webkit_dom_interface_name_finalize;
}

static void webkit_dom_interface_name_init(WebKitDOMInterfaceName* request)
{
    WebKitDOMInterfaceNamePrivate* priv = WEBKIT_DOM_INTERFACE_NAME_GET_PRIVATE(request);
    new (priv) WebKitDOMInterfaceNamePrivate();
}

