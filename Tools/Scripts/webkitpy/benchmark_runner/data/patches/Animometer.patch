diff --git a/PerformanceTests/Animometer/resources/debug-runner/animometer.js b/PerformanceTests/Animometer/resources/debug-runner/animometer.js
index ffc71ba..02a5d49 100644
--- a/resources/debug-runner/animometer.js
+++ b/resources/debug-runner/animometer.js
@@ -119,6 +119,57 @@ Utilities.extendObject(window.benchmarkRunnerClient, {
     {
         this.progressBar.incrementRange();
         this.results.calculateScore(testData);
+    },
+
+    _computeTestReport: function(testName, testResults)
+    {
+        return [testResults[Strings.json.score]];
+    },
+
+    _computeSuiteReports: function(suiteName, suiteResults)
+    {
+        var testsReports = {};
+        for (var testName in suiteResults) {
+            var testReports = this._computeTestReport(testName, suiteResults[testName]);
+            testsReports[testName] = { "metrics": { "Score": { "current": testReports } } };
+        }
+        return testsReports;
+    },
+
+    _computeIterationReports: function(iterationResults)
+    {
+        var suitesReports = {};
+        for (var suiteName in iterationResults[Strings.json.results.tests]) {
+            var testsReports = this._computeSuiteReports(suiteName, iterationResults[Strings.json.results.tests][suiteName]);
+            suitesReports[suiteName] = { "metrics": { "Score": ["Geometric"] }, "tests": testsReports };
+        }
+        return suitesReports;
+    },
+
+    _computeResultsReports: function()
+    {
+        var results = this.results.results[0];
+        var iterationReports = this._computeIterationReports(results);
+        return {"Animometer": {"metrics" : {"Score" : ["Geometric"]}, "tests" : iterationReports } };
+    },
+
+    didFinishLastIteration: function()
+    {
+        // submit result to server
+        var results = JSON.stringify(this._computeResultsReports());
+        var xhr = new XMLHttpRequest();
+        xhr.open("POST", "/report");
+        xhr.setRequestHeader("Content-type", "application/json");
+        xhr.setRequestHeader("Content-length", results.length);
+        xhr.setRequestHeader("Connection", "close");
+        xhr.onreadystatechange = function() {
+            if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
+                closeRequest = new XMLHttpRequest();
+                closeRequest.open("GET", "/shutdown");
+                closeRequest.send()
+            }
+        }
+        xhr.send(results);
     }
 });

@@ -255,10 +307,10 @@ window.suitesManager =
         startButton.disabled = true;
     },

-    _onChangeSuiteCheckbox: function(event)
+    _onChangeSuiteCheckbox: function(suiteCheckbox)
     {
-        var selected = event.target.checked;
-        event.target.testsElements.forEach(function(testElement) {
+        var selected = suiteCheckbox.checked;
+        suiteCheckbox.testsElements.forEach(function(testElement) {
             var testCheckbox = this._checkboxElement(testElement);
             testCheckbox.checked = selected;
         }, this);
@@ -279,7 +331,9 @@ window.suitesManager =

         var suiteCheckbox = Utilities.createElement("input", { type: "checkbox" }, label);
         suiteCheckbox.suite = suite;
-        suiteCheckbox.onchange = this._onChangeSuiteCheckbox.bind(this);
+        suiteCheckbox.onchange = function(event) {
+            this._onChangeSuiteCheckbox(event.target);
+        }.bind(this);
         suiteCheckbox.testsElements = [];

         label.appendChild(document.createTextNode(" " + suite.name));
@@ -428,45 +482,8 @@ window.suitesManager =
 Utilities.extendObject(window.benchmarkController, {
     initialize: function()
     {
-        document.forms["benchmark-options"].addEventListener("change", benchmarkController.onBenchmarkOptionsChanged, true);
-        document.forms["graph-type"].addEventListener("change", benchmarkController.onGraphTypeChanged, true);
-        document.forms["time-graph-options"].addEventListener("change", benchmarkController.onTimeGraphOptionsChanged, true);
-        document.forms["complexity-graph-options"].addEventListener("change", benchmarkController.onComplexityGraphOptionsChanged, true);
-        optionsManager.updateUIFromLocalStorage();
         suitesManager.createElements();
-        suitesManager.updateUIFromLocalStorage();
-        suitesManager.updateDisplay();
-        suitesManager.updateEditsElementsState();
-
-        var dropTarget = document.getElementById("drop-target");
-        function stopEvent(e) {
-            e.stopPropagation();
-            e.preventDefault();
-        }
-        dropTarget.addEventListener("dragenter", stopEvent, false);
-        dropTarget.addEventListener("dragover", stopEvent, false);
-        dropTarget.addEventListener("dragleave", stopEvent, false);
-        dropTarget.addEventListener("drop", function (e) {
-            e.stopPropagation();
-            e.preventDefault();
-
-            if (!e.dataTransfer.files.length)
-                return;
-
-            var file = e.dataTransfer.files[0];
-
-            var reader = new FileReader();
-            reader.filename = file.name;
-            reader.onload = function(e) {
-                var run = JSON.parse(e.target.result);
-                benchmarkRunnerClient.results = new ResultsDashboard(run.options, run.data);
-                benchmarkController.showResults();
-            };
-
-            reader.readAsText(file);
-            document.title = "File: " + reader.filename;
-        }, false);
-
+        setTimeout(benchmarkController.startBenchmark.bind(benchmarkController), 3000);
     },

     onBenchmarkOptionsChanged: function(event)
@@ -482,7 +499,20 @@ Utilities.extendObject(window.benchmarkController, {

     startBenchmark: function()
     {
-        var options = optionsManager.updateLocalStorageFromUI();
+        var options = {
+            "test-interval": 20,
+            "display": "minimal",
+            "controller": "ramp",
+            "kalman-process-error": 1,
+            "kalman-measurement-error": 4,
+            "time-measurement": "performance"
+        };
+
+        for (var suiteIndex = 0; suiteIndex < 5; ++suiteIndex) {
+            var suiteCheckbox = document.querySelector("label[for=suite-" + suiteIndex + "] input[type=checkbox]");
+            suiteCheckbox.checked = true;
+            suitesManager._onChangeSuiteCheckbox(suiteCheckbox);
+        }
         var suites = suitesManager.updateLocalStorageFromUI();
         this._startBenchmark(suites, options, "running-test");
     },
